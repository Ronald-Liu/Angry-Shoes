	Session.vim	/^inoremap  u$/;"	m
	Session.vim	/^vmap  "*d$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
013l	Session.vim	/^normal! 013l$/;"	m
02l	Session.vim	/^normal! 02l$/;"	m
041l	Session.vim	/^normal! 041l$/;"	m
<C-Del>	Session.vim	/^vmap <C-Del> "*d$/;"	m
<C-F9>	Session.vim	/^map <C-F9> :! %<.exe $/;"	m
<C-Insert>	Session.vim	/^vmap <C-Insert> "*y$/;"	m
<F8>	Session.vim	/^map <F8> :!python % $/;"	m
<F9>	Session.vim	/^map <F9> :!gcc -g -o %<.exe % $/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)$/;"	m
<S-Del>	Session.vim	/^vmap <S-Del> "*d$/;"	m
<S-Insert>	Session.vim	/^map! <S-Insert> *$/;"	m
<S-Insert>	Session.vim	/^nmap <S-Insert> "*P$/;"	m
<S-Insert>	Session.vim	/^vmap <S-Insert> "-d"*P$/;"	m
AR	Makefile	/^AR            = ar cqs$/;"	m
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)$/;"	m
DEFAULT_INTERVAL	gameConn.h	8;"	d
DEFINES	Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = \/opt\/qtsdk-2010.05\/qt\/mkspecs\/common\/g++.conf \\$/;"	m
ENV_H	env.h	2;"	d
GAMECONN_H	gameConn.h	2;"	d
GAMEPLATE_H	gameplate.h	2;"	d
HP	obj.h	/^		float HP;$/;"	m	class:obj
INCPATH	Makefile	/^INCPATH       = -I\/opt\/qtsdk-2010.05\/qt\/mkspecs\/linux-g++ -I. -I\/opt\/qtsdk-2010.05\/qt\/include\/QtCore -I\/opt\/qtsdk-2010.05\/qt\/include\/QtGui -I\/opt\/qtsdk-2010.05\/qt\/include -I. -I.$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
LFLAGS	Makefile	/^LFLAGS        = -Wl,-O1 -Wl,-rpath,\/opt\/qtsdk-2010.05\/qt\/lib$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS)  -L\/opt\/qtsdk-2010.05\/qt\/lib -lQtGui -L\/opt\/qtsdk-2010.05\/qt\/lib -L\/usr\/X11R6\/lib -lQtCore -lpthread $/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
MATHUTIL_H	mathUtil.h	2;"	d
MAX_WEAPON_TYPE	gameConn.h	9;"	d
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
OBJECTS	Makefile	/^OBJECTS       = blocks.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OBJ_H	obj.h	2;"	d
Q	Session.vim	/^map Q gq$/;"	m
QMAKE	Makefile	/^QMAKE         = \/opt\/qtsdk-2010.05\/qt\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = ab$/;"	m
RANLIB	Makefile	/^RANLIB        = $/;"	m
SED	Makefile	/^SED           = sed$/;"	m
SHOES_H	weapons.h	2;"	d
SOURCES	Makefile	/^SOURCES       = blocks.cpp \\$/;"	m
STRIP	Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = ab$/;"	m
VISIBLEOBJ_H	visibleObj.h	2;"	d
add	gameplate.cpp	/^void gamePlate::add(visibleObj* o)$/;"	f	class:gamePlate
canvas	gameplate.h	/^		QGraphicsScene canvas;$/;"	m	class:gamePlate
conn	visibleObj.h	/^		static gameConn* conn;$/;"	m	class:visibleObj
del	gameplate.cpp	/^inline void gamePlate::del(visibleObj* o)$/;"	f	class:gamePlate
destory	gameConn.cpp	/^void gameConn::destory(visibleObj* o)$/;"	f	class:gameConn
destory	visibleObj.cpp	/^void visibleObj::destory(obj& byWho)$/;"	f	class:visibleObj
destory	weapons.cpp	/^void testWep::destory(obj& byWho)$/;"	f	class:testWep
env	env.h	/^class env$/;"	c
g	env.h	/^		vec g;$/;"	m	class:env
gameConn	gameConn.cpp	/^gameConn::gameConn(env* p, gamePlate* v):$/;"	f	class:gameConn
gameConn	gameConn.h	/^class gameConn:public QWidget$/;"	c
gameOver	gameConn.cpp	/^void gameConn::gameOver()$/;"	f	class:gameConn
gamePlate	gameplate.cpp	/^gamePlate::gamePlate(QWidget *parent) :$/;"	f	class:gamePlate
gamePlate	gameplate.h	/^class gamePlate : public QWidget {$/;"	c
getStaticMetaObject	moc_gameConn.cpp	/^const QMetaObject &gameConn::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:gameConn
getStaticMetaObject	moc_gameplate.cpp	/^const QMetaObject &gamePlate::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:gamePlate
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
hackPackage	weapons.h	/^class hackPackage:public visibleObj$/;"	c
iron	weapons.h	/^class iron:public visibleObj$/;"	c
lIt	gameplate.cpp	/^typedef std::list<visibleObj*>::iterator lIt;$/;"	t	file:
launchPos	gameConn.h	/^		vec launchPos;$/;"	m	class:gameConn
list	env.h	/^		std::vector<obj*> list;$/;"	m	class:env
list	gameplate.h	/^		std::list<visibleObj*> list;$/;"	m	class:gamePlate
loadWep	gameConn.cpp	/^void gameConn::loadWep(int type)$/;"	f	class:gameConn
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f
mainTimer	gameConn.h	/^		QTimer mainTimer;$/;"	m	class:gameConn
mass	obj.h	/^		float mass;$/;"	m	class:obj
metaObject	moc_gameConn.cpp	/^const QMetaObject *gameConn::metaObject() const$/;"	f	class:gameConn
metaObject	moc_gameplate.cpp	/^const QMetaObject *gamePlate::metaObject() const$/;"	f	class:gamePlate
nike	weapons.h	/^class nike:public visibleObj$/;"	c
obj	obj.h	/^class obj$/;"	c
pos	obj.h	/^		vec pos;$/;"	m	class:obj
proxy	gameConn.h	/^		env* proxy;$/;"	m	class:gameConn
qt_meta_data_gameConn	moc_gameConn.cpp	/^static const uint qt_meta_data_gameConn[] = {$/;"	v	file:
qt_meta_data_gamePlate	moc_gameplate.cpp	/^static const uint qt_meta_data_gamePlate[] = {$/;"	v	file:
qt_meta_stringdata_gameConn	moc_gameConn.cpp	/^static const char qt_meta_stringdata_gameConn[] = {$/;"	v	file:
qt_meta_stringdata_gamePlate	moc_gameplate.cpp	/^static const char qt_meta_stringdata_gamePlate[] = {$/;"	v	file:
qt_metacall	moc_gameConn.cpp	/^int gameConn::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:gameConn
qt_metacall	moc_gameplate.cpp	/^int gamePlate::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:gamePlate
qt_metacast	moc_gameConn.cpp	/^void *gameConn::qt_metacast(const char *_clname)$/;"	f	class:gameConn
qt_metacast	moc_gameplate.cpp	/^void *gamePlate::qt_metacast(const char *_clname)$/;"	f	class:gamePlate
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 42 - ((11 * winheight(0) + 12) \/ 24)$/;"	v
s:l	Session.vim	/^let s:l = 5 - ((4 * winheight(0) + 24) \/ 49)$/;"	v
s:l	Session.vim	/^let s:l = 7 - ((6 * winheight(0) + 12) \/ 24)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
setCenter	visibleObj.cpp	/^inline void visibleObj::setCenter(){setOffset(-0.5*QPointF(boundingRect().width(), boundingRect().height()));}$/;"	f	class:visibleObj
setGameConn	visibleObj.h	/^		static inline void setGameConn(gameConn* con){conn = con;}$/;"	f	class:visibleObj
setLaunchPos	gameConn.h	/^		inline void setLaunchPos(float x, float y){launchPos.x = x; launchPos.y = y;}$/;"	f	class:gameConn
setMap	gameConn.cpp	/^void gameConn::setMap(char* filename)$/;"	f	class:gameConn
shape	obj.h	/^		vec shape;$/;"	m	class:obj
start	gameConn.cpp	/^void gameConn::start()$/;"	f	class:gameConn
staticMetaObject	moc_gameConn.cpp	/^const QMetaObject gameConn::staticMetaObject = {$/;"	m	class:gameConn	file:
staticMetaObject	moc_gameplate.cpp	/^const QMetaObject gamePlate::staticMetaObject = {$/;"	m	class:gamePlate	file:
sync	gameplate.cpp	/^void gamePlate::sync()$/;"	f	class:gamePlate
sync	visibleObj.cpp	/^void visibleObj::sync()$/;"	f	class:visibleObj
target	blocks.cpp	/^target::target(float x, float y,float w, float h, float thta):$/;"	f	class:target
target	blocks.h	/^class target:public visibleObj$/;"	c
targetCnt	gameConn.h	/^		int targetCnt;$/;"	m	class:gameConn
testBlock	blocks.h	/^class testBlock:public visibleObj$/;"	c
testWep	weapons.cpp	/^testWep::testWep():$/;"	f	class:testWep
testWep	weapons.h	/^class testWep:public visibleObj$/;"	c
theta	obj.h	/^		float theta;$/;"	m	class:obj
tick	gameConn.cpp	/^void gameConn::tick()$/;"	f	class:gameConn
type	obj.h	/^		int type;$/;"	m	class:obj
vec	mathUtil.h	/^	vec():$/;"	f	struct:vec
vec	mathUtil.h	/^	vec(float a, float b):$/;"	f	struct:vec
vec	mathUtil.h	/^struct vec$/;"	s
view	gameplate.h	/^		QGraphicsView view;$/;"	m	class:gamePlate
viewer	gameConn.h	/^		gamePlate *viewer;$/;"	m	class:gameConn
visibleObj	visibleObj.cpp	/^visibleObj::visibleObj(QPixmap& map)$/;"	f	class:visibleObj
visibleObj	visibleObj.cpp	/^visibleObj::visibleObj(const char* filename, const obj& model):$/;"	f	class:visibleObj
visibleObj	visibleObj.h	/^class visibleObj:public obj, public QGraphicsPixmapItem$/;"	c
wepCnt	gameConn.h	/^		int wepCnt[MAX_WEAPON_TYPE];$/;"	m	class:gameConn
x	mathUtil.h	/^        float x, y;$/;"	m	struct:vec
y	mathUtil.h	/^        float x, y;$/;"	m	struct:vec
zt	Session.vim	/^normal! zt$/;"	m
~gamePlate	gameplate.cpp	/^gamePlate::~gamePlate()$/;"	f	class:gamePlate
